# Import necessary libraries
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt

# Check for GPU availability
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Synthetic data generation function (stress-strain time history)
def generate_synthetic_data(num_points=100):
    # Simulate some strain data: linear loading and unloading
    time = np.linspace(0, 1, num_points)
    strain = np.sin(2 * np.pi * time)
    
    # Create synthetic stress data for viscoelastic behavior (lagging strain)
    stress = 0.6 * np.sin(2 * np.pi * time - np.pi / 6) + 0.3 * strain
    return torch.Tensor(time).to(device), torch.Tensor(strain).to(device), torch.Tensor(stress).to(device)

# Generate synthetic data
time, strain, stress = generate_synthetic_data()

# Plot the synthetic data
plt.plot(time.cpu().numpy(), strain.cpu().numpy(), label="Strain")
plt.plot(time.cpu().numpy(), stress.cpu().numpy(), label="Stress")
plt.xlabel('Time')
plt.ylabel('Strain/Stress')
plt.legend()
plt.show()

# Define the ANN model for elastic potential W
class ElasticPotential(nn.Module):
    def __init__(self, input_size=1, hidden_size=10):
        super(ElasticPotential, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.fc3 = nn.Linear(hidden_size, 1)
        self.softplus_squared = nn.Softplus()

    def forward(self, x):
        x = self.softplus_squared(self.fc1(x))
        x = self.softplus_squared(self.fc2(x))
        return self.fc3(x)

# Define the ANN model for viscoelastic potential V
class ViscoelasticPotential(nn.Module):
    def __init__(self, input_size=2, hidden_size=10):
        super(ViscoelasticPotential, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.fc3 = nn.Linear(hidden_size, 1)
        self.softplus_squared = nn.Softplus()

    def forward(self, x):
        x = self.softplus_squared(self.fc1(x))
        x = self.softplus_squared(self.fc2(x))
        return self.fc3(x)

# Define the dissipation potential G for internal variable evolution
class DissipationPotential(nn.Module):
    def __init__(self, input_size=2, hidden_size=10):
        super(DissipationPotential, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.fc3 = nn.Linear(hidden_size, 1)
        self.softplus_squared = nn.Softplus()

    def forward(self, x):
        x = self.softplus_squared(self.fc1(x))
        x = self.softplus_squared(self.fc2(x))
        return self.fc3(x)

# Instantiate the models
W_model = ElasticPotential().to(device)
V_model = ViscoelasticPotential().to(device)
G_model = DissipationPotential().to(device)

# Define loss function (MSE Loss) and optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(list(W_model.parameters()) + list(V_model.parameters()) + list(G_model.parameters()), lr=1e-3)

# Training loop
num_epochs = 1000
loss_history = []

for epoch in range(num_epochs):
    optimizer.zero_grad()
    
    # Forward pass for elastic potential W (using strain as input)
    W_output = W_model(strain.unsqueeze(1))
    
    # Forward pass for viscoelastic potential V (using strain and internal variable alpha as inputs)
    alpha = torch.zeros_like(strain).to(device)  # Simplified assumption: starting with zero internal variable
    V_input = torch.stack([strain, alpha], dim=1)
    V_output = V_model(V_input)
    
    # Total stress (W + V)
    predicted_stress = W_output + V_output
    
    # Compute loss
    loss = criterion(predicted_stress.squeeze(), stress)
    loss_history.append(loss.item())
    
    # Backpropagation and optimization
    loss.backward()
    optimizer.step()

    if (epoch + 1) % 100 == 0:
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.6f}')

# Plot loss history
plt.plot(loss_history)
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training Loss History')
plt.show()

# Plot predicted stress vs actual stress
predicted_stress = W_model(strain.unsqueeze(1)) + V_model(torch.stack([strain, alpha], dim=1))
plt.plot(time.cpu().numpy(), stress.cpu().numpy(), label='Actual Stress')
plt.plot(time.cpu().numpy(), predicted_stress.squeeze().detach().cpu().numpy(), label='Predicted Stress')
plt.xlabel('Time')
plt.ylabel('Stress')
plt.legend()
plt.show()

